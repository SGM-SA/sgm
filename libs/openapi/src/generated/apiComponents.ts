/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query'
import { useApiContext, ApiContext } from './apiContext'
import type * as Fetcher from './apiFetcher'
import { apiFetch } from './apiFetcher'
import type * as Schemas from './apiSchemas'

export type ApiAffairesListQueryParams = {
	/**
	 * Numéro de l'affaire
	 */
	num_affaire?: string
	/**
	 * Champ de tri
	 */
	ordering?: string
	/**
	 * Numéro de la page
	 */
	page?: string
	/**
	 * Nombre d'affaires par page
	 */
	per_page?: string
	/**
	 * Recherche dans les champs num_affaire, client, description
	 */
	search?: string
	/**
	 * Statut de l'affaire
	 */
	statut?:
		| 'A00'
		| 'D00'
		| 'E00'
		| 'EAA'
		| 'EAC'
		| 'ECA'
		| 'ECC'
		| 'ECH'
		| 'ED'
		| 'EHA'
		| 'EST'
		| 'G00'
		| 'INT'
		| 'P00'
		| 'S00'
		| 'SV0'
		| 'T00'
}

export type ApiAffairesListError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesListVariables = {
	queryParams?: ApiAffairesListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Liste des affaires
 */
export const fetchApiAffairesList = (
	variables: ApiAffairesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedAffaireDetailsList,
		ApiAffairesListError,
		undefined,
		{},
		ApiAffairesListQueryParams,
		{}
	>({ url: '/api/affaires/', method: 'get', ...variables, signal })

/**
 * Liste des affaires
 */
export const useApiAffairesList = <TData = Schemas.PaginatedAffaireDetailsList>(
	variables: ApiAffairesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedAffaireDetailsList,
			ApiAffairesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedAffaireDetailsList,
		ApiAffairesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affaires/',
			operationId: 'apiAffairesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffairesList({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type ApiAffairesRetrievePathParams = {
	id: number
}

export type ApiAffairesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesRetrieveVariables = {
	pathParams: ApiAffairesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer / update une affaire
 */
export const fetchApiAffairesRetrieve = (
	variables: ApiAffairesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffaireDetails,
		ApiAffairesRetrieveError,
		undefined,
		{},
		{},
		ApiAffairesRetrievePathParams
	>({ url: '/api/affaires/{id}', method: 'get', ...variables, signal })

/**
 * Permet de récupérer / update une affaire
 */
export const useApiAffairesRetrieve = <TData = Schemas.AffaireDetails>(
	variables: ApiAffairesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.AffaireDetails,
			ApiAffairesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.AffaireDetails,
		ApiAffairesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affaires/{id}',
			operationId: 'apiAffairesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffairesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffairesUpdatePathParams = {
	id: number
}

export type ApiAffairesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesUpdateVariables = {
	body?: Schemas.AffaireDetailsRequest
	pathParams: ApiAffairesUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer / update une affaire
 */
export const fetchApiAffairesUpdate = (
	variables: ApiAffairesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffaireDetails,
		ApiAffairesUpdateError,
		Schemas.AffaireDetailsRequest,
		{},
		{},
		ApiAffairesUpdatePathParams
	>({ url: '/api/affaires/{id}', method: 'put', ...variables, signal })

/**
 * Permet de récupérer / update une affaire
 */
export const useApiAffairesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffaireDetails,
			ApiAffairesUpdateError,
			ApiAffairesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffaireDetails,
		ApiAffairesUpdateError,
		ApiAffairesUpdateVariables
	>({
		mutationFn: (variables: ApiAffairesUpdateVariables) =>
			fetchApiAffairesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiAffairesPartialUpdatePathParams = {
	id: number
}

export type ApiAffairesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesPartialUpdateVariables = {
	body?: Schemas.PatchedAffaireDetailsRequest
	pathParams: ApiAffairesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer / update une affaire
 */
export const fetchApiAffairesPartialUpdate = (
	variables: ApiAffairesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffaireDetails,
		ApiAffairesPartialUpdateError,
		Schemas.PatchedAffaireDetailsRequest,
		{},
		{},
		ApiAffairesPartialUpdatePathParams
	>({ url: '/api/affaires/{id}', method: 'patch', ...variables, signal })

/**
 * Permet de récupérer / update une affaire
 */
export const useApiAffairesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffaireDetails,
			ApiAffairesPartialUpdateError,
			ApiAffairesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffaireDetails,
		ApiAffairesPartialUpdateError,
		ApiAffairesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiAffairesPartialUpdateVariables) =>
			fetchApiAffairesPartialUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiAffairesFichesRetrievePathParams = {
	id: number
}

export type ApiAffairesFichesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesFichesRetrieveVariables = {
	pathParams: ApiAffairesFichesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer une affaire avec ses fiches
 */
export const fetchApiAffairesFichesRetrieve = (
	variables: ApiAffairesFichesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffaireFiches,
		ApiAffairesFichesRetrieveError,
		undefined,
		{},
		{},
		ApiAffairesFichesRetrievePathParams
	>({ url: '/api/affaires/{id}/fiches', method: 'get', ...variables, signal })

/**
 * Permet de récupérer une affaire avec ses fiches
 */
export const useApiAffairesFichesRetrieve = <TData = Schemas.AffaireFiches>(
	variables: ApiAffairesFichesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.AffaireFiches,
			ApiAffairesFichesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.AffaireFiches,
		ApiAffairesFichesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affaires/{id}/fiches',
			operationId: 'apiAffairesFichesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffairesFichesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffairesNumsListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
	/**
	 * Recherche dans les champs num_affaire
	 */
	search?: string
}

export type ApiAffairesNumsListError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesNumsListVariables = {
	queryParams?: ApiAffairesNumsListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de une liste de numéro d'affaire avec un numéro d'affaire
 */
export const fetchApiAffairesNumsList = (
	variables: ApiAffairesNumsListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedAffaireNumAffaireList,
		ApiAffairesNumsListError,
		undefined,
		{},
		ApiAffairesNumsListQueryParams,
		{}
	>({ url: '/api/affaires/nums', method: 'get', ...variables, signal })

/**
 * Permet de une liste de numéro d'affaire avec un numéro d'affaire
 */
export const useApiAffairesNumsList = <
	TData = Schemas.PaginatedAffaireNumAffaireList
>(
	variables: ApiAffairesNumsListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedAffaireNumAffaireList,
			ApiAffairesNumsListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedAffaireNumAffaireList,
		ApiAffairesNumsListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affaires/nums',
			operationId: 'apiAffairesNumsList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffairesNumsList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffairesStatRetrievePathParams = {
	id: number
}

export type ApiAffairesStatRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesStatRetrieveVariables = {
	pathParams: ApiAffairesStatRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer les stats d'une affaire spécifique
 */
export const fetchApiAffairesStatRetrieve = (
	variables: ApiAffairesStatRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffaireStats,
		ApiAffairesStatRetrieveError,
		undefined,
		{},
		{},
		ApiAffairesStatRetrievePathParams
	>({ url: '/api/affaires/stat/{id}', method: 'get', ...variables, signal })

/**
 * Permet de récupérer les stats d'une affaire spécifique
 */
export const useApiAffairesStatRetrieve = <TData = Schemas.AffaireStats>(
	variables: ApiAffairesStatRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.AffaireStats,
			ApiAffairesStatRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.AffaireStats,
		ApiAffairesStatRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affaires/stat/{id}',
			operationId: 'apiAffairesStatRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffairesStatRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffairesStatsRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiAffairesStatsRetrieveVariables = ApiContext['fetcherOptions']

/**
 * Permet de récupérer les stats globals des affaires
 */
export const fetchApiAffairesStatsRetrieve = (
	variables: ApiAffairesStatsRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffaireStatsGlobal,
		ApiAffairesStatsRetrieveError,
		undefined,
		{},
		{},
		{}
	>({ url: '/api/affaires/stats/', method: 'get', ...variables, signal })

/**
 * Permet de récupérer les stats globals des affaires
 */
export const useApiAffairesStatsRetrieve = <TData = Schemas.AffaireStatsGlobal>(
	variables: ApiAffairesStatsRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.AffaireStatsGlobal,
			ApiAffairesStatsRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.AffaireStatsGlobal,
		ApiAffairesStatsRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affaires/stats/',
			operationId: 'apiAffairesStatsRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffairesStatsRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffectationsAjustagesListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiAffectationsAjustagesListError = Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsAjustagesListVariables = {
	queryParams?: ApiAffectationsAjustagesListQueryParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsAjustagesList = (
	variables: ApiAffectationsAjustagesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedAffectationAjustageDetailList,
		ApiAffectationsAjustagesListError,
		undefined,
		{},
		ApiAffectationsAjustagesListQueryParams,
		{}
	>({
		url: '/api/affectations/ajustages/',
		method: 'get',
		...variables,
		signal,
	})

export const useApiAffectationsAjustagesList = <
	TData = Schemas.PaginatedAffectationAjustageDetailList
>(
	variables: ApiAffectationsAjustagesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedAffectationAjustageDetailList,
			ApiAffectationsAjustagesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedAffectationAjustageDetailList,
		ApiAffectationsAjustagesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affectations/ajustages/',
			operationId: 'apiAffectationsAjustagesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffectationsAjustagesList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffectationsAjustagesCreateError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsAjustagesCreateVariables = {
	body: Schemas.AffectationAjustageDetailRequest
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsAjustagesCreate = (
	variables: ApiAffectationsAjustagesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesCreateError,
		Schemas.AffectationAjustageDetailRequest,
		{},
		{},
		{}
	>({
		url: '/api/affectations/ajustages/',
		method: 'post',
		...variables,
		signal,
	})

export const useApiAffectationsAjustagesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffectationAjustageDetail,
			ApiAffectationsAjustagesCreateError,
			ApiAffectationsAjustagesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesCreateError,
		ApiAffectationsAjustagesCreateVariables
	>({
		mutationFn: (variables: ApiAffectationsAjustagesCreateVariables) =>
			fetchApiAffectationsAjustagesCreate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsAjustagesRetrievePathParams = {
	id: number
}

export type ApiAffectationsAjustagesRetrieveError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsAjustagesRetrieveVariables = {
	pathParams: ApiAffectationsAjustagesRetrievePathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsAjustagesRetrieve = (
	variables: ApiAffectationsAjustagesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesRetrieveError,
		undefined,
		{},
		{},
		ApiAffectationsAjustagesRetrievePathParams
	>({
		url: '/api/affectations/ajustages/{id}',
		method: 'get',
		...variables,
		signal,
	})

export const useApiAffectationsAjustagesRetrieve = <
	TData = Schemas.AffectationAjustageDetail
>(
	variables: ApiAffectationsAjustagesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.AffectationAjustageDetail,
			ApiAffectationsAjustagesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affectations/ajustages/{id}',
			operationId: 'apiAffectationsAjustagesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffectationsAjustagesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffectationsAjustagesUpdatePathParams = {
	id: number
}

export type ApiAffectationsAjustagesUpdateError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsAjustagesUpdateVariables = {
	body: Schemas.AffectationAjustageDetailRequest
	pathParams: ApiAffectationsAjustagesUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsAjustagesUpdate = (
	variables: ApiAffectationsAjustagesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesUpdateError,
		Schemas.AffectationAjustageDetailRequest,
		{},
		{},
		ApiAffectationsAjustagesUpdatePathParams
	>({
		url: '/api/affectations/ajustages/{id}',
		method: 'put',
		...variables,
		signal,
	})

export const useApiAffectationsAjustagesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffectationAjustageDetail,
			ApiAffectationsAjustagesUpdateError,
			ApiAffectationsAjustagesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesUpdateError,
		ApiAffectationsAjustagesUpdateVariables
	>({
		mutationFn: (variables: ApiAffectationsAjustagesUpdateVariables) =>
			fetchApiAffectationsAjustagesUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsAjustagesPartialUpdatePathParams = {
	id: number
}

export type ApiAffectationsAjustagesPartialUpdateError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsAjustagesPartialUpdateVariables = {
	body?: Schemas.PatchedAffectationAjustageDetailRequest
	pathParams: ApiAffectationsAjustagesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsAjustagesPartialUpdate = (
	variables: ApiAffectationsAjustagesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesPartialUpdateError,
		Schemas.PatchedAffectationAjustageDetailRequest,
		{},
		{},
		ApiAffectationsAjustagesPartialUpdatePathParams
	>({
		url: '/api/affectations/ajustages/{id}',
		method: 'patch',
		...variables,
		signal,
	})

export const useApiAffectationsAjustagesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffectationAjustageDetail,
			ApiAffectationsAjustagesPartialUpdateError,
			ApiAffectationsAjustagesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffectationAjustageDetail,
		ApiAffectationsAjustagesPartialUpdateError,
		ApiAffectationsAjustagesPartialUpdateVariables
	>({
		mutationFn: (
			variables: ApiAffectationsAjustagesPartialUpdateVariables
		) =>
			fetchApiAffectationsAjustagesPartialUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsAjustagesDestroyPathParams = {
	id: number
}

export type ApiAffectationsAjustagesDestroyError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsAjustagesDestroyVariables = {
	pathParams: ApiAffectationsAjustagesDestroyPathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsAjustagesDestroy = (
	variables: ApiAffectationsAjustagesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiAffectationsAjustagesDestroyError,
		undefined,
		{},
		{},
		ApiAffectationsAjustagesDestroyPathParams
	>({
		url: '/api/affectations/ajustages/{id}',
		method: 'delete',
		...variables,
		signal,
	})

export const useApiAffectationsAjustagesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiAffectationsAjustagesDestroyError,
			ApiAffectationsAjustagesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiAffectationsAjustagesDestroyError,
		ApiAffectationsAjustagesDestroyVariables
	>({
		mutationFn: (variables: ApiAffectationsAjustagesDestroyVariables) =>
			fetchApiAffectationsAjustagesDestroy({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsMachinesListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiAffectationsMachinesListError = Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsMachinesListVariables = {
	queryParams?: ApiAffectationsMachinesListQueryParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsMachinesList = (
	variables: ApiAffectationsMachinesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedAffectationMachineDetailList,
		ApiAffectationsMachinesListError,
		undefined,
		{},
		ApiAffectationsMachinesListQueryParams,
		{}
	>({
		url: '/api/affectations/machines/',
		method: 'get',
		...variables,
		signal,
	})

export const useApiAffectationsMachinesList = <
	TData = Schemas.PaginatedAffectationMachineDetailList
>(
	variables: ApiAffectationsMachinesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedAffectationMachineDetailList,
			ApiAffectationsMachinesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedAffectationMachineDetailList,
		ApiAffectationsMachinesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affectations/machines/',
			operationId: 'apiAffectationsMachinesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffectationsMachinesList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffectationsMachinesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsMachinesCreateVariables = {
	body: Schemas.AffectationMachineDetailRequest
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsMachinesCreate = (
	variables: ApiAffectationsMachinesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesCreateError,
		Schemas.AffectationMachineDetailRequest,
		{},
		{},
		{}
	>({
		url: '/api/affectations/machines/',
		method: 'post',
		...variables,
		signal,
	})

export const useApiAffectationsMachinesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffectationMachineDetail,
			ApiAffectationsMachinesCreateError,
			ApiAffectationsMachinesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesCreateError,
		ApiAffectationsMachinesCreateVariables
	>({
		mutationFn: (variables: ApiAffectationsMachinesCreateVariables) =>
			fetchApiAffectationsMachinesCreate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsMachinesRetrievePathParams = {
	id: number
}

export type ApiAffectationsMachinesRetrieveError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsMachinesRetrieveVariables = {
	pathParams: ApiAffectationsMachinesRetrievePathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsMachinesRetrieve = (
	variables: ApiAffectationsMachinesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesRetrieveError,
		undefined,
		{},
		{},
		ApiAffectationsMachinesRetrievePathParams
	>({
		url: '/api/affectations/machines/{id}',
		method: 'get',
		...variables,
		signal,
	})

export const useApiAffectationsMachinesRetrieve = <
	TData = Schemas.AffectationMachineDetail
>(
	variables: ApiAffectationsMachinesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.AffectationMachineDetail,
			ApiAffectationsMachinesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/affectations/machines/{id}',
			operationId: 'apiAffectationsMachinesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiAffectationsMachinesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiAffectationsMachinesUpdatePathParams = {
	id: number
}

export type ApiAffectationsMachinesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsMachinesUpdateVariables = {
	body: Schemas.AffectationMachineDetailRequest
	pathParams: ApiAffectationsMachinesUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsMachinesUpdate = (
	variables: ApiAffectationsMachinesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesUpdateError,
		Schemas.AffectationMachineDetailRequest,
		{},
		{},
		ApiAffectationsMachinesUpdatePathParams
	>({
		url: '/api/affectations/machines/{id}',
		method: 'put',
		...variables,
		signal,
	})

export const useApiAffectationsMachinesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffectationMachineDetail,
			ApiAffectationsMachinesUpdateError,
			ApiAffectationsMachinesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesUpdateError,
		ApiAffectationsMachinesUpdateVariables
	>({
		mutationFn: (variables: ApiAffectationsMachinesUpdateVariables) =>
			fetchApiAffectationsMachinesUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsMachinesPartialUpdatePathParams = {
	id: number
}

export type ApiAffectationsMachinesPartialUpdateError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsMachinesPartialUpdateVariables = {
	body?: Schemas.PatchedAffectationMachineDetailRequest
	pathParams: ApiAffectationsMachinesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsMachinesPartialUpdate = (
	variables: ApiAffectationsMachinesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesPartialUpdateError,
		Schemas.PatchedAffectationMachineDetailRequest,
		{},
		{},
		ApiAffectationsMachinesPartialUpdatePathParams
	>({
		url: '/api/affectations/machines/{id}',
		method: 'patch',
		...variables,
		signal,
	})

export const useApiAffectationsMachinesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.AffectationMachineDetail,
			ApiAffectationsMachinesPartialUpdateError,
			ApiAffectationsMachinesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.AffectationMachineDetail,
		ApiAffectationsMachinesPartialUpdateError,
		ApiAffectationsMachinesPartialUpdateVariables
	>({
		mutationFn: (
			variables: ApiAffectationsMachinesPartialUpdateVariables
		) =>
			fetchApiAffectationsMachinesPartialUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiAffectationsMachinesDestroyPathParams = {
	id: number
}

export type ApiAffectationsMachinesDestroyError =
	Fetcher.ErrorWrapper<undefined>

export type ApiAffectationsMachinesDestroyVariables = {
	pathParams: ApiAffectationsMachinesDestroyPathParams
} & ApiContext['fetcherOptions']

export const fetchApiAffectationsMachinesDestroy = (
	variables: ApiAffectationsMachinesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiAffectationsMachinesDestroyError,
		undefined,
		{},
		{},
		ApiAffectationsMachinesDestroyPathParams
	>({
		url: '/api/affectations/machines/{id}',
		method: 'delete',
		...variables,
		signal,
	})

export const useApiAffectationsMachinesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiAffectationsMachinesDestroyError,
			ApiAffectationsMachinesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiAffectationsMachinesDestroyError,
		ApiAffectationsMachinesDestroyVariables
	>({
		mutationFn: (variables: ApiAffectationsMachinesDestroyVariables) =>
			fetchApiAffectationsMachinesDestroy({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiEtapesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiEtapesCreateVariables = {
	body: Schemas.EtapeCreateRequest
} & ApiContext['fetcherOptions']

export const fetchApiEtapesCreate = (
	variables: ApiEtapesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeCreate,
		ApiEtapesCreateError,
		Schemas.EtapeCreateRequest,
		{},
		{},
		{}
	>({ url: '/api/etapes/', method: 'post', ...variables, signal })

export const useApiEtapesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.EtapeCreate,
			ApiEtapesCreateError,
			ApiEtapesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.EtapeCreate,
		ApiEtapesCreateError,
		ApiEtapesCreateVariables
	>({
		mutationFn: (variables: ApiEtapesCreateVariables) =>
			fetchApiEtapesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiEtapesRetrievePathParams = {
	id: number
}

export type ApiEtapesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiEtapesRetrieveVariables = {
	pathParams: ApiEtapesRetrievePathParams
} & ApiContext['fetcherOptions']

export const fetchApiEtapesRetrieve = (
	variables: ApiEtapesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeCreate,
		ApiEtapesRetrieveError,
		undefined,
		{},
		{},
		ApiEtapesRetrievePathParams
	>({ url: '/api/etapes/{id}', method: 'get', ...variables, signal })

export const useApiEtapesRetrieve = <TData = Schemas.EtapeCreate>(
	variables: ApiEtapesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.EtapeCreate,
			ApiEtapesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.EtapeCreate,
		ApiEtapesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/etapes/{id}',
			operationId: 'apiEtapesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiEtapesRetrieve({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type ApiEtapesUpdatePathParams = {
	id: number
}

export type ApiEtapesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiEtapesUpdateVariables = {
	body: Schemas.EtapeCreateRequest
	pathParams: ApiEtapesUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchApiEtapesUpdate = (
	variables: ApiEtapesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeCreate,
		ApiEtapesUpdateError,
		Schemas.EtapeCreateRequest,
		{},
		{},
		ApiEtapesUpdatePathParams
	>({ url: '/api/etapes/{id}', method: 'put', ...variables, signal })

export const useApiEtapesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.EtapeCreate,
			ApiEtapesUpdateError,
			ApiEtapesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.EtapeCreate,
		ApiEtapesUpdateError,
		ApiEtapesUpdateVariables
	>({
		mutationFn: (variables: ApiEtapesUpdateVariables) =>
			fetchApiEtapesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiEtapesPartialUpdatePathParams = {
	id: number
}

export type ApiEtapesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiEtapesPartialUpdateVariables = {
	body?: Schemas.PatchedEtapeCreateRequest
	pathParams: ApiEtapesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

export const fetchApiEtapesPartialUpdate = (
	variables: ApiEtapesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeCreate,
		ApiEtapesPartialUpdateError,
		Schemas.PatchedEtapeCreateRequest,
		{},
		{},
		ApiEtapesPartialUpdatePathParams
	>({ url: '/api/etapes/{id}', method: 'patch', ...variables, signal })

export const useApiEtapesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.EtapeCreate,
			ApiEtapesPartialUpdateError,
			ApiEtapesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.EtapeCreate,
		ApiEtapesPartialUpdateError,
		ApiEtapesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiEtapesPartialUpdateVariables) =>
			fetchApiEtapesPartialUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiEtapesDestroyPathParams = {
	id: number
}

export type ApiEtapesDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiEtapesDestroyVariables = {
	pathParams: ApiEtapesDestroyPathParams
} & ApiContext['fetcherOptions']

export const fetchApiEtapesDestroy = (
	variables: ApiEtapesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiEtapesDestroyError,
		undefined,
		{},
		{},
		ApiEtapesDestroyPathParams
	>({ url: '/api/etapes/{id}', method: 'delete', ...variables, signal })

export const useApiEtapesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiEtapesDestroyError,
			ApiEtapesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiEtapesDestroyError,
		ApiEtapesDestroyVariables
	>({
		mutationFn: (variables: ApiEtapesDestroyVariables) =>
			fetchApiEtapesDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiEtapesDeleteCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiEtapesDeleteCreateVariables = {
	body: Schemas.BulkDeleteRequest
} & ApiContext['fetcherOptions']

/**
 * Bulk delete d'objets en fonction de leur id
 */
export const fetchApiEtapesDeleteCreate = (
	variables: ApiEtapesDeleteCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiEtapesDeleteCreateError,
		Schemas.BulkDeleteRequest,
		{},
		{},
		{}
	>({ url: '/api/etapes/delete', method: 'post', ...variables, signal })

/**
 * Bulk delete d'objets en fonction de leur id
 */
export const useApiEtapesDeleteCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiEtapesDeleteCreateError,
			ApiEtapesDeleteCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiEtapesDeleteCreateError,
		ApiEtapesDeleteCreateVariables
	>({
		mutationFn: (variables: ApiEtapesDeleteCreateVariables) =>
			fetchApiEtapesDeleteCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiFichesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesCreateVariables = {
	body: Schemas.FicheCRUDRequest
} & ApiContext['fetcherOptions']

/**
 * Permet de créer une fiche
 */
export const fetchApiFichesCreate = (
	variables: ApiFichesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheCRUD,
		ApiFichesCreateError,
		Schemas.FicheCRUDRequest,
		{},
		{},
		{}
	>({ url: '/api/fiches/', method: 'post', ...variables, signal })

/**
 * Permet de créer une fiche
 */
export const useApiFichesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.FicheCRUD,
			ApiFichesCreateError,
			ApiFichesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.FicheCRUD,
		ApiFichesCreateError,
		ApiFichesCreateVariables
	>({
		mutationFn: (variables: ApiFichesCreateVariables) =>
			fetchApiFichesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiFichesRetrievePathParams = {
	id: number
}

export type ApiFichesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesRetrieveVariables = {
	pathParams: ApiFichesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de récupérer une fiche spécifique en utilisant son ID.
 */
export const fetchApiFichesRetrieve = (
	variables: ApiFichesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheCRUD,
		ApiFichesRetrieveError,
		undefined,
		{},
		{},
		ApiFichesRetrievePathParams
	>({ url: '/api/fiches/{id}', method: 'get', ...variables, signal })

/**
 * Cette opération permet de récupérer une fiche spécifique en utilisant son ID.
 */
export const useApiFichesRetrieve = <TData = Schemas.FicheCRUD>(
	variables: ApiFichesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.FicheCRUD,
			ApiFichesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.FicheCRUD,
		ApiFichesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/fiches/{id}',
			operationId: 'apiFichesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiFichesRetrieve({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type ApiFichesUpdatePathParams = {
	id: number
}

export type ApiFichesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesUpdateVariables = {
	body: Schemas.FicheCRUDRequest
	pathParams: ApiFichesUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de mettre à jour une fiche spécifique en utilisant son ID.
 */
export const fetchApiFichesUpdate = (
	variables: ApiFichesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheCRUD,
		ApiFichesUpdateError,
		Schemas.FicheCRUDRequest,
		{},
		{},
		ApiFichesUpdatePathParams
	>({ url: '/api/fiches/{id}', method: 'put', ...variables, signal })

/**
 * Cette opération permet de mettre à jour une fiche spécifique en utilisant son ID.
 */
export const useApiFichesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.FicheCRUD,
			ApiFichesUpdateError,
			ApiFichesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.FicheCRUD,
		ApiFichesUpdateError,
		ApiFichesUpdateVariables
	>({
		mutationFn: (variables: ApiFichesUpdateVariables) =>
			fetchApiFichesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiFichesPartialUpdatePathParams = {
	id: number
}

export type ApiFichesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesPartialUpdateVariables = {
	body?: Schemas.PatchedFicheCRUDRequest
	pathParams: ApiFichesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de mettre à jour partiellement une fiche spécifique en utilisant son ID.
 */
export const fetchApiFichesPartialUpdate = (
	variables: ApiFichesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheCRUD,
		ApiFichesPartialUpdateError,
		Schemas.PatchedFicheCRUDRequest,
		{},
		{},
		ApiFichesPartialUpdatePathParams
	>({ url: '/api/fiches/{id}', method: 'patch', ...variables, signal })

/**
 * Cette opération permet de mettre à jour partiellement une fiche spécifique en utilisant son ID.
 */
export const useApiFichesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.FicheCRUD,
			ApiFichesPartialUpdateError,
			ApiFichesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.FicheCRUD,
		ApiFichesPartialUpdateError,
		ApiFichesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiFichesPartialUpdateVariables) =>
			fetchApiFichesPartialUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiFichesDestroyPathParams = {
	id: number
}

export type ApiFichesDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesDestroyVariables = {
	pathParams: ApiFichesDestroyPathParams
} & ApiContext['fetcherOptions']

export const fetchApiFichesDestroy = (
	variables: ApiFichesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiFichesDestroyError,
		undefined,
		{},
		{},
		ApiFichesDestroyPathParams
	>({ url: '/api/fiches/{id}', method: 'delete', ...variables, signal })

export const useApiFichesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiFichesDestroyError,
			ApiFichesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiFichesDestroyError,
		ApiFichesDestroyVariables
	>({
		mutationFn: (variables: ApiFichesDestroyVariables) =>
			fetchApiFichesDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiFichesAjustageAPlanifierListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiFichesAjustageAPlanifierListError =
	Fetcher.ErrorWrapper<undefined>

export type ApiFichesAjustageAPlanifierListVariables = {
	queryParams?: ApiFichesAjustageAPlanifierListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer pour une semaine donnée, chaque affaires et leurs fiches / étapes ajustage à traiter dans chaque zone
 */
export const fetchApiFichesAjustageAPlanifierList = (
	variables: ApiFichesAjustageAPlanifierListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedAffaireFichesEtapesList,
		ApiFichesAjustageAPlanifierListError,
		undefined,
		{},
		ApiFichesAjustageAPlanifierListQueryParams,
		{}
	>({
		url: '/api/fiches/ajustage/a_planifier',
		method: 'get',
		...variables,
		signal,
	})

/**
 * Permet de récupérer pour une semaine donnée, chaque affaires et leurs fiches / étapes ajustage à traiter dans chaque zone
 */
export const useApiFichesAjustageAPlanifierList = <
	TData = Schemas.PaginatedAffaireFichesEtapesList
>(
	variables: ApiFichesAjustageAPlanifierListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedAffaireFichesEtapesList,
			ApiFichesAjustageAPlanifierListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedAffaireFichesEtapesList,
		ApiFichesAjustageAPlanifierListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/fiches/ajustage/a_planifier',
			operationId: 'apiFichesAjustageAPlanifierList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiFichesAjustageAPlanifierList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiFichesDeleteCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesDeleteCreateVariables = {
	body: Schemas.BulkDeleteRequest
} & ApiContext['fetcherOptions']

/**
 * Permet de supprimer plusieurs fiches en même temps
 */
export const fetchApiFichesDeleteCreate = (
	variables: ApiFichesDeleteCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiFichesDeleteCreateError,
		Schemas.BulkDeleteRequest,
		{},
		{},
		{}
	>({ url: '/api/fiches/delete/', method: 'post', ...variables, signal })

/**
 * Permet de supprimer plusieurs fiches en même temps
 */
export const useApiFichesDeleteCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiFichesDeleteCreateError,
			ApiFichesDeleteCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiFichesDeleteCreateError,
		ApiFichesDeleteCreateVariables
	>({
		mutationFn: (variables: ApiFichesDeleteCreateVariables) =>
			fetchApiFichesDeleteCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiFichesEtapesRetrievePathParams = {
	id: number
}

export type ApiFichesEtapesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiFichesEtapesRetrieveVariables = {
	pathParams: ApiFichesEtapesRetrievePathParams
} & ApiContext['fetcherOptions']

export const fetchApiFichesEtapesRetrieve = (
	variables: ApiFichesEtapesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheEtEtapesAjustage,
		ApiFichesEtapesRetrieveError,
		undefined,
		{},
		{},
		ApiFichesEtapesRetrievePathParams
	>({ url: '/api/fiches/etapes/{id}', method: 'get', ...variables, signal })

export const useApiFichesEtapesRetrieve = <
	TData = Schemas.FicheEtEtapesAjustage
>(
	variables: ApiFichesEtapesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.FicheEtEtapesAjustage,
			ApiFichesEtapesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.FicheEtEtapesAjustage,
		ApiFichesEtapesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/fiches/etapes/{id}',
			operationId: 'apiFichesEtapesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiFichesEtapesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiFichesMachineAPlanifierListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiFichesMachineAPlanifierListError =
	Fetcher.ErrorWrapper<undefined>

export type ApiFichesMachineAPlanifierListVariables = {
	queryParams?: ApiFichesMachineAPlanifierListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer pour une semaine donnée, chaque affaires et leurs fiches / étapes machine à traiter
 */
export const fetchApiFichesMachineAPlanifierList = (
	variables: ApiFichesMachineAPlanifierListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedAffaireFichesEtapesList,
		ApiFichesMachineAPlanifierListError,
		undefined,
		{},
		ApiFichesMachineAPlanifierListQueryParams,
		{}
	>({
		url: '/api/fiches/machine/a_planifier',
		method: 'get',
		...variables,
		signal,
	})

/**
 * Permet de récupérer pour une semaine donnée, chaque affaires et leurs fiches / étapes machine à traiter
 */
export const useApiFichesMachineAPlanifierList = <
	TData = Schemas.PaginatedAffaireFichesEtapesList
>(
	variables: ApiFichesMachineAPlanifierListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedAffaireFichesEtapesList,
			ApiFichesMachineAPlanifierListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedAffaireFichesEtapesList,
		ApiFichesMachineAPlanifierListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/fiches/machine/a_planifier',
			operationId: 'apiFichesMachineAPlanifierList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiFichesMachineAPlanifierList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiGroupeMachineListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiGroupeMachineListError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachineListVariables = {
	queryParams?: ApiGroupeMachineListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de récupérer la liste de tous les GroupesMachine.
 */
export const fetchApiGroupeMachineList = (
	variables: ApiGroupeMachineListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedGroupeMachineList,
		ApiGroupeMachineListError,
		undefined,
		{},
		ApiGroupeMachineListQueryParams,
		{}
	>({ url: '/api/groupe_machine/', method: 'get', ...variables, signal })

/**
 * Cette opération permet de récupérer la liste de tous les GroupesMachine.
 */
export const useApiGroupeMachineList = <
	TData = Schemas.PaginatedGroupeMachineList
>(
	variables: ApiGroupeMachineListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedGroupeMachineList,
			ApiGroupeMachineListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedGroupeMachineList,
		ApiGroupeMachineListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/groupe_machine/',
			operationId: 'apiGroupeMachineList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiGroupeMachineList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiGroupeMachineCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachineCreateVariables = {
	body: Schemas.GroupeMachineRequest
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de créer un nouveau GroupeMachine.
 */
export const fetchApiGroupeMachineCreate = (
	variables: ApiGroupeMachineCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.GroupeMachine,
		ApiGroupeMachineCreateError,
		Schemas.GroupeMachineRequest,
		{},
		{},
		{}
	>({ url: '/api/groupe_machine/', method: 'post', ...variables, signal })

/**
 * Cette opération permet de créer un nouveau GroupeMachine.
 */
export const useApiGroupeMachineCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.GroupeMachine,
			ApiGroupeMachineCreateError,
			ApiGroupeMachineCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.GroupeMachine,
		ApiGroupeMachineCreateError,
		ApiGroupeMachineCreateVariables
	>({
		mutationFn: (variables: ApiGroupeMachineCreateVariables) =>
			fetchApiGroupeMachineCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiGroupeMachineRetrievePathParams = {
	id: number
}

export type ApiGroupeMachineRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachineRetrieveVariables = {
	pathParams: ApiGroupeMachineRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de récupérer un GroupeMachine spécifique en utilisant son ID.
 */
export const fetchApiGroupeMachineRetrieve = (
	variables: ApiGroupeMachineRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.GroupeMachine,
		ApiGroupeMachineRetrieveError,
		undefined,
		{},
		{},
		ApiGroupeMachineRetrievePathParams
	>({ url: '/api/groupe_machine/{id}/', method: 'get', ...variables, signal })

/**
 * Cette opération permet de récupérer un GroupeMachine spécifique en utilisant son ID.
 */
export const useApiGroupeMachineRetrieve = <TData = Schemas.GroupeMachine>(
	variables: ApiGroupeMachineRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.GroupeMachine,
			ApiGroupeMachineRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.GroupeMachine,
		ApiGroupeMachineRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/groupe_machine/{id}/',
			operationId: 'apiGroupeMachineRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiGroupeMachineRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiGroupeMachineUpdatePathParams = {
	id: number
}

export type ApiGroupeMachineUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachineUpdateVariables = {
	body: Schemas.GroupeMachineRequest
	pathParams: ApiGroupeMachineUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de mettre à jour un GroupeMachine spécifique en utilisant son ID.
 */
export const fetchApiGroupeMachineUpdate = (
	variables: ApiGroupeMachineUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.GroupeMachine,
		ApiGroupeMachineUpdateError,
		Schemas.GroupeMachineRequest,
		{},
		{},
		ApiGroupeMachineUpdatePathParams
	>({ url: '/api/groupe_machine/{id}/', method: 'put', ...variables, signal })

/**
 * Cette opération permet de mettre à jour un GroupeMachine spécifique en utilisant son ID.
 */
export const useApiGroupeMachineUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.GroupeMachine,
			ApiGroupeMachineUpdateError,
			ApiGroupeMachineUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.GroupeMachine,
		ApiGroupeMachineUpdateError,
		ApiGroupeMachineUpdateVariables
	>({
		mutationFn: (variables: ApiGroupeMachineUpdateVariables) =>
			fetchApiGroupeMachineUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiGroupeMachinePartialUpdatePathParams = {
	id: number
}

export type ApiGroupeMachinePartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachinePartialUpdateVariables = {
	body?: Schemas.PatchedGroupeMachineRequest
	pathParams: ApiGroupeMachinePartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de mettre à jour partiellement un GroupeMachine spécifique en utilisant son ID.
 */
export const fetchApiGroupeMachinePartialUpdate = (
	variables: ApiGroupeMachinePartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.GroupeMachine,
		ApiGroupeMachinePartialUpdateError,
		Schemas.PatchedGroupeMachineRequest,
		{},
		{},
		ApiGroupeMachinePartialUpdatePathParams
	>({
		url: '/api/groupe_machine/{id}/',
		method: 'patch',
		...variables,
		signal,
	})

/**
 * Cette opération permet de mettre à jour partiellement un GroupeMachine spécifique en utilisant son ID.
 */
export const useApiGroupeMachinePartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.GroupeMachine,
			ApiGroupeMachinePartialUpdateError,
			ApiGroupeMachinePartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.GroupeMachine,
		ApiGroupeMachinePartialUpdateError,
		ApiGroupeMachinePartialUpdateVariables
	>({
		mutationFn: (variables: ApiGroupeMachinePartialUpdateVariables) =>
			fetchApiGroupeMachinePartialUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiGroupeMachineDestroyPathParams = {
	id: number
}

export type ApiGroupeMachineDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachineDestroyVariables = {
	pathParams: ApiGroupeMachineDestroyPathParams
} & ApiContext['fetcherOptions']

/**
 * Cette opération permet de supprimer un GroupeMachine spécifique en utilisant son ID.
 */
export const fetchApiGroupeMachineDestroy = (
	variables: ApiGroupeMachineDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiGroupeMachineDestroyError,
		undefined,
		{},
		{},
		ApiGroupeMachineDestroyPathParams
	>({
		url: '/api/groupe_machine/{id}/',
		method: 'delete',
		...variables,
		signal,
	})

/**
 * Cette opération permet de supprimer un GroupeMachine spécifique en utilisant son ID.
 */
export const useApiGroupeMachineDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiGroupeMachineDestroyError,
			ApiGroupeMachineDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiGroupeMachineDestroyError,
		ApiGroupeMachineDestroyVariables
	>({
		mutationFn: (variables: ApiGroupeMachineDestroyVariables) =>
			fetchApiGroupeMachineDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiGroupeMachineDeleteCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiGroupeMachineDeleteCreateVariables = {
	body: Schemas.BulkDeleteRequest
} & ApiContext['fetcherOptions']

/**
 * Permet de supprimer plusieurs GroupeMachines en même temps
 */
export const fetchApiGroupeMachineDeleteCreate = (
	variables: ApiGroupeMachineDeleteCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiGroupeMachineDeleteCreateError,
		Schemas.BulkDeleteRequest,
		{},
		{},
		{}
	>({
		url: '/api/groupe_machine/delete/',
		method: 'post',
		...variables,
		signal,
	})

/**
 * Permet de supprimer plusieurs GroupeMachines en même temps
 */
export const useApiGroupeMachineDeleteCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiGroupeMachineDeleteCreateError,
			ApiGroupeMachineDeleteCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiGroupeMachineDeleteCreateError,
		ApiGroupeMachineDeleteCreateVariables
	>({
		mutationFn: (variables: ApiGroupeMachineDeleteCreateVariables) =>
			fetchApiGroupeMachineDeleteCreate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiMachinesListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiMachinesListError = Fetcher.ErrorWrapper<undefined>

export type ApiMachinesListVariables = {
	queryParams?: ApiMachinesListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Liste des machines
 */
export const fetchApiMachinesList = (
	variables: ApiMachinesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedMachineDetailList,
		ApiMachinesListError,
		undefined,
		{},
		ApiMachinesListQueryParams,
		{}
	>({ url: '/api/machines/', method: 'get', ...variables, signal })

/**
 * Liste des machines
 */
export const useApiMachinesList = <TData = Schemas.PaginatedMachineDetailList>(
	variables: ApiMachinesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedMachineDetailList,
			ApiMachinesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedMachineDetailList,
		ApiMachinesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/machines/',
			operationId: 'apiMachinesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiMachinesList({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type ApiMachinesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiMachinesCreateVariables = {
	body: Schemas.MachineDetailRequest
} & ApiContext['fetcherOptions']

/**
 * Création d'une machine
 */
export const fetchApiMachinesCreate = (
	variables: ApiMachinesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.MachineDetail,
		ApiMachinesCreateError,
		Schemas.MachineDetailRequest,
		{},
		{},
		{}
	>({ url: '/api/machines/', method: 'post', ...variables, signal })

/**
 * Création d'une machine
 */
export const useApiMachinesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.MachineDetail,
			ApiMachinesCreateError,
			ApiMachinesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.MachineDetail,
		ApiMachinesCreateError,
		ApiMachinesCreateVariables
	>({
		mutationFn: (variables: ApiMachinesCreateVariables) =>
			fetchApiMachinesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiMachinesRetrievePathParams = {
	id: number
}

export type ApiMachinesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiMachinesRetrieveVariables = {
	pathParams: ApiMachinesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Détail d'une machine
 */
export const fetchApiMachinesRetrieve = (
	variables: ApiMachinesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.MachineDetail,
		ApiMachinesRetrieveError,
		undefined,
		{},
		{},
		ApiMachinesRetrievePathParams
	>({ url: '/api/machines/{id}', method: 'get', ...variables, signal })

/**
 * Détail d'une machine
 */
export const useApiMachinesRetrieve = <TData = Schemas.MachineDetail>(
	variables: ApiMachinesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.MachineDetail,
			ApiMachinesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.MachineDetail,
		ApiMachinesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/machines/{id}',
			operationId: 'apiMachinesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiMachinesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiMachinesUpdatePathParams = {
	id: number
}

export type ApiMachinesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiMachinesUpdateVariables = {
	body: Schemas.MachineDetailRequest
	pathParams: ApiMachinesUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Modification d'une machine
 */
export const fetchApiMachinesUpdate = (
	variables: ApiMachinesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.MachineDetail,
		ApiMachinesUpdateError,
		Schemas.MachineDetailRequest,
		{},
		{},
		ApiMachinesUpdatePathParams
	>({ url: '/api/machines/{id}', method: 'put', ...variables, signal })

/**
 * Modification d'une machine
 */
export const useApiMachinesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.MachineDetail,
			ApiMachinesUpdateError,
			ApiMachinesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.MachineDetail,
		ApiMachinesUpdateError,
		ApiMachinesUpdateVariables
	>({
		mutationFn: (variables: ApiMachinesUpdateVariables) =>
			fetchApiMachinesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiMachinesPartialUpdatePathParams = {
	id: number
}

export type ApiMachinesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiMachinesPartialUpdateVariables = {
	body?: Schemas.PatchedMachineDetailRequest
	pathParams: ApiMachinesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Modification d'une machine
 */
export const fetchApiMachinesPartialUpdate = (
	variables: ApiMachinesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.MachineDetail,
		ApiMachinesPartialUpdateError,
		Schemas.PatchedMachineDetailRequest,
		{},
		{},
		ApiMachinesPartialUpdatePathParams
	>({ url: '/api/machines/{id}', method: 'patch', ...variables, signal })

/**
 * Modification d'une machine
 */
export const useApiMachinesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.MachineDetail,
			ApiMachinesPartialUpdateError,
			ApiMachinesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.MachineDetail,
		ApiMachinesPartialUpdateError,
		ApiMachinesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiMachinesPartialUpdateVariables) =>
			fetchApiMachinesPartialUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiMachinesDeleteDestroyQueryParams = {
	ids: string
}

export type ApiMachinesDeleteDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiMachinesDeleteDestroyVariables = {
	queryParams: ApiMachinesDeleteDestroyQueryParams
} & ApiContext['fetcherOptions']

/**
 * Suppression d'une machine ou plusieurs machines, la machine est désactivée et non supprimée pour garder l'historique
 */
export const fetchApiMachinesDeleteDestroy = (
	variables: ApiMachinesDeleteDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiMachinesDeleteDestroyError,
		undefined,
		{},
		ApiMachinesDeleteDestroyQueryParams,
		{}
	>({ url: '/api/machines/delete', method: 'delete', ...variables, signal })

/**
 * Suppression d'une machine ou plusieurs machines, la machine est désactivée et non supprimée pour garder l'historique
 */
export const useApiMachinesDeleteDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiMachinesDeleteDestroyError,
			ApiMachinesDeleteDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiMachinesDeleteDestroyError,
		ApiMachinesDeleteDestroyVariables
	>({
		mutationFn: (variables: ApiMachinesDeleteDestroyVariables) =>
			fetchApiMachinesDeleteDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesEtapesListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiModelesEtapesListError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesEtapesListVariables = {
	queryParams?: ApiModelesEtapesListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer une liste d'étape modèle
 */
export const fetchApiModelesEtapesList = (
	variables: ApiModelesEtapesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedEtapeModeleListCreateList,
		ApiModelesEtapesListError,
		undefined,
		{},
		ApiModelesEtapesListQueryParams,
		{}
	>({ url: '/api/modeles/etapes/', method: 'get', ...variables, signal })

/**
 * Permet de récupérer une liste d'étape modèle
 */
export const useApiModelesEtapesList = <
	TData = Schemas.PaginatedEtapeModeleListCreateList
>(
	variables: ApiModelesEtapesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedEtapeModeleListCreateList,
			ApiModelesEtapesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedEtapeModeleListCreateList,
		ApiModelesEtapesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/modeles/etapes/',
			operationId: 'apiModelesEtapesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiModelesEtapesList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiModelesEtapesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesEtapesCreateVariables = {
	body: Schemas.EtapeModeleListCreateRequest
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer une liste d'étape modèle
 */
export const fetchApiModelesEtapesCreate = (
	variables: ApiModelesEtapesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeModeleListCreate,
		ApiModelesEtapesCreateError,
		Schemas.EtapeModeleListCreateRequest,
		{},
		{},
		{}
	>({ url: '/api/modeles/etapes/', method: 'post', ...variables, signal })

/**
 * Permet de récupérer une liste d'étape modèle
 */
export const useApiModelesEtapesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.EtapeModeleListCreate,
			ApiModelesEtapesCreateError,
			ApiModelesEtapesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.EtapeModeleListCreate,
		ApiModelesEtapesCreateError,
		ApiModelesEtapesCreateVariables
	>({
		mutationFn: (variables: ApiModelesEtapesCreateVariables) =>
			fetchApiModelesEtapesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesEtapesRetrievePathParams = {
	id: number
}

export type ApiModelesEtapesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesEtapesRetrieveVariables = {
	pathParams: ApiModelesEtapesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * gestion étape modèle
 */
export const fetchApiModelesEtapesRetrieve = (
	variables: ApiModelesEtapesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeModeleDetail,
		ApiModelesEtapesRetrieveError,
		undefined,
		{},
		{},
		ApiModelesEtapesRetrievePathParams
	>({ url: '/api/modeles/etapes/{id}', method: 'get', ...variables, signal })

/**
 * gestion étape modèle
 */
export const useApiModelesEtapesRetrieve = <TData = Schemas.EtapeModeleDetail>(
	variables: ApiModelesEtapesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.EtapeModeleDetail,
			ApiModelesEtapesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.EtapeModeleDetail,
		ApiModelesEtapesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/modeles/etapes/{id}',
			operationId: 'apiModelesEtapesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiModelesEtapesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiModelesEtapesUpdatePathParams = {
	id: number
}

export type ApiModelesEtapesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesEtapesUpdateVariables = {
	body: Schemas.EtapeModeleDetailRequest
	pathParams: ApiModelesEtapesUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * gestion étape modèle
 */
export const fetchApiModelesEtapesUpdate = (
	variables: ApiModelesEtapesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeModeleDetail,
		ApiModelesEtapesUpdateError,
		Schemas.EtapeModeleDetailRequest,
		{},
		{},
		ApiModelesEtapesUpdatePathParams
	>({ url: '/api/modeles/etapes/{id}', method: 'put', ...variables, signal })

/**
 * gestion étape modèle
 */
export const useApiModelesEtapesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.EtapeModeleDetail,
			ApiModelesEtapesUpdateError,
			ApiModelesEtapesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.EtapeModeleDetail,
		ApiModelesEtapesUpdateError,
		ApiModelesEtapesUpdateVariables
	>({
		mutationFn: (variables: ApiModelesEtapesUpdateVariables) =>
			fetchApiModelesEtapesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesEtapesPartialUpdatePathParams = {
	id: number
}

export type ApiModelesEtapesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesEtapesPartialUpdateVariables = {
	body?: Schemas.PatchedEtapeModeleDetailRequest
	pathParams: ApiModelesEtapesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * gestion étape modèle
 */
export const fetchApiModelesEtapesPartialUpdate = (
	variables: ApiModelesEtapesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.EtapeModeleDetail,
		ApiModelesEtapesPartialUpdateError,
		Schemas.PatchedEtapeModeleDetailRequest,
		{},
		{},
		ApiModelesEtapesPartialUpdatePathParams
	>({
		url: '/api/modeles/etapes/{id}',
		method: 'patch',
		...variables,
		signal,
	})

/**
 * gestion étape modèle
 */
export const useApiModelesEtapesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.EtapeModeleDetail,
			ApiModelesEtapesPartialUpdateError,
			ApiModelesEtapesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.EtapeModeleDetail,
		ApiModelesEtapesPartialUpdateError,
		ApiModelesEtapesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiModelesEtapesPartialUpdateVariables) =>
			fetchApiModelesEtapesPartialUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiModelesEtapesDestroyPathParams = {
	id: number
}

export type ApiModelesEtapesDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesEtapesDestroyVariables = {
	pathParams: ApiModelesEtapesDestroyPathParams
} & ApiContext['fetcherOptions']

/**
 * gestion étape modèle
 */
export const fetchApiModelesEtapesDestroy = (
	variables: ApiModelesEtapesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiModelesEtapesDestroyError,
		undefined,
		{},
		{},
		ApiModelesEtapesDestroyPathParams
	>({
		url: '/api/modeles/etapes/{id}',
		method: 'delete',
		...variables,
		signal,
	})

/**
 * gestion étape modèle
 */
export const useApiModelesEtapesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiModelesEtapesDestroyError,
			ApiModelesEtapesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiModelesEtapesDestroyError,
		ApiModelesEtapesDestroyVariables
	>({
		mutationFn: (variables: ApiModelesEtapesDestroyVariables) =>
			fetchApiModelesEtapesDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesFichesListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiModelesFichesListError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesListVariables = {
	queryParams?: ApiModelesFichesListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer une liste de fiches modèle
 */
export const fetchApiModelesFichesList = (
	variables: ApiModelesFichesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedFicheModeleDetailList,
		ApiModelesFichesListError,
		undefined,
		{},
		ApiModelesFichesListQueryParams,
		{}
	>({ url: '/api/modeles/fiches/', method: 'get', ...variables, signal })

/**
 * Permet de récupérer une liste de fiches modèle
 */
export const useApiModelesFichesList = <
	TData = Schemas.PaginatedFicheModeleDetailList
>(
	variables: ApiModelesFichesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedFicheModeleDetailList,
			ApiModelesFichesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedFicheModeleDetailList,
		ApiModelesFichesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/modeles/fiches/',
			operationId: 'apiModelesFichesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiModelesFichesList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiModelesFichesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesCreateVariables = {
	body?: Schemas.FicheModeleDetailRequest
} & ApiContext['fetcherOptions']

/**
 * Permet de créer une fiche modèle
 */
export const fetchApiModelesFichesCreate = (
	variables: ApiModelesFichesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheModeleDetail,
		ApiModelesFichesCreateError,
		Schemas.FicheModeleDetailRequest,
		{},
		{},
		{}
	>({ url: '/api/modeles/fiches/', method: 'post', ...variables, signal })

/**
 * Permet de créer une fiche modèle
 */
export const useApiModelesFichesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.FicheModeleDetail,
			ApiModelesFichesCreateError,
			ApiModelesFichesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.FicheModeleDetail,
		ApiModelesFichesCreateError,
		ApiModelesFichesCreateVariables
	>({
		mutationFn: (variables: ApiModelesFichesCreateVariables) =>
			fetchApiModelesFichesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesFichesRetrievePathParams = {
	id: number
}

export type ApiModelesFichesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesRetrieveVariables = {
	pathParams: ApiModelesFichesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de gérer une fiche modèle
 */
export const fetchApiModelesFichesRetrieve = (
	variables: ApiModelesFichesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheModeleEtEtapes,
		ApiModelesFichesRetrieveError,
		undefined,
		{},
		{},
		ApiModelesFichesRetrievePathParams
	>({ url: '/api/modeles/fiches/{id}', method: 'get', ...variables, signal })

/**
 * Permet de gérer une fiche modèle
 */
export const useApiModelesFichesRetrieve = <
	TData = Schemas.FicheModeleEtEtapes
>(
	variables: ApiModelesFichesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.FicheModeleEtEtapes,
			ApiModelesFichesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.FicheModeleEtEtapes,
		ApiModelesFichesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/modeles/fiches/{id}',
			operationId: 'apiModelesFichesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiModelesFichesRetrieve(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiModelesFichesUpdatePathParams = {
	id: number
}

export type ApiModelesFichesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesUpdateVariables = {
	body?: Schemas.FicheModeleEtEtapesRequest
	pathParams: ApiModelesFichesUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de gérer une fiche modèle
 */
export const fetchApiModelesFichesUpdate = (
	variables: ApiModelesFichesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheModeleEtEtapes,
		ApiModelesFichesUpdateError,
		Schemas.FicheModeleEtEtapesRequest,
		{},
		{},
		ApiModelesFichesUpdatePathParams
	>({ url: '/api/modeles/fiches/{id}', method: 'put', ...variables, signal })

/**
 * Permet de gérer une fiche modèle
 */
export const useApiModelesFichesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.FicheModeleEtEtapes,
			ApiModelesFichesUpdateError,
			ApiModelesFichesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.FicheModeleEtEtapes,
		ApiModelesFichesUpdateError,
		ApiModelesFichesUpdateVariables
	>({
		mutationFn: (variables: ApiModelesFichesUpdateVariables) =>
			fetchApiModelesFichesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesFichesPartialUpdatePathParams = {
	id: number
}

export type ApiModelesFichesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesPartialUpdateVariables = {
	body?: Schemas.PatchedFicheModeleEtEtapesRequest
	pathParams: ApiModelesFichesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de gérer une fiche modèle
 */
export const fetchApiModelesFichesPartialUpdate = (
	variables: ApiModelesFichesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.FicheModeleEtEtapes,
		ApiModelesFichesPartialUpdateError,
		Schemas.PatchedFicheModeleEtEtapesRequest,
		{},
		{},
		ApiModelesFichesPartialUpdatePathParams
	>({
		url: '/api/modeles/fiches/{id}',
		method: 'patch',
		...variables,
		signal,
	})

/**
 * Permet de gérer une fiche modèle
 */
export const useApiModelesFichesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.FicheModeleEtEtapes,
			ApiModelesFichesPartialUpdateError,
			ApiModelesFichesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.FicheModeleEtEtapes,
		ApiModelesFichesPartialUpdateError,
		ApiModelesFichesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiModelesFichesPartialUpdateVariables) =>
			fetchApiModelesFichesPartialUpdate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiModelesFichesDestroyPathParams = {
	id: number
}

export type ApiModelesFichesDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesDestroyVariables = {
	pathParams: ApiModelesFichesDestroyPathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de gérer une fiche modèle
 */
export const fetchApiModelesFichesDestroy = (
	variables: ApiModelesFichesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiModelesFichesDestroyError,
		undefined,
		{},
		{},
		ApiModelesFichesDestroyPathParams
	>({
		url: '/api/modeles/fiches/{id}',
		method: 'delete',
		...variables,
		signal,
	})

/**
 * Permet de gérer une fiche modèle
 */
export const useApiModelesFichesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiModelesFichesDestroyError,
			ApiModelesFichesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiModelesFichesDestroyError,
		ApiModelesFichesDestroyVariables
	>({
		mutationFn: (variables: ApiModelesFichesDestroyVariables) =>
			fetchApiModelesFichesDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiModelesFichesCopyCreateQueryParams = {
	/**
	 * id de l'affaire vers laquelle copier la fiche modèle
	 */
	affaire: number
	/**
	 * id de la fiche modèle à copier
	 */
	modele: number
}

export type ApiModelesFichesCopyCreateError = Fetcher.ErrorWrapper<
	| {
			status: 400
			payload: string
	  }
	| {
			status: 404
			payload: string
	  }
>

export type ApiModelesFichesCopyCreateVariables = {
	queryParams: ApiModelesFichesCopyCreateQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de copier une fiche modèle vers une affaire
 */
export const fetchApiModelesFichesCopyCreate = (
	variables: ApiModelesFichesCopyCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		string,
		ApiModelesFichesCopyCreateError,
		undefined,
		{},
		ApiModelesFichesCopyCreateQueryParams,
		{}
	>({ url: '/api/modeles/fiches/copy', method: 'post', ...variables, signal })

/**
 * Permet de copier une fiche modèle vers une affaire
 */
export const useApiModelesFichesCopyCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			string,
			ApiModelesFichesCopyCreateError,
			ApiModelesFichesCopyCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		string,
		ApiModelesFichesCopyCreateError,
		ApiModelesFichesCopyCreateVariables
	>({
		mutationFn: (variables: ApiModelesFichesCopyCreateVariables) =>
			fetchApiModelesFichesCopyCreate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiModelesFichesOptionsListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiModelesFichesOptionsListError = Fetcher.ErrorWrapper<undefined>

export type ApiModelesFichesOptionsListVariables = {
	queryParams?: ApiModelesFichesOptionsListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer les titres des fiches modèle sous formes d'options pour un select
 */
export const fetchApiModelesFichesOptionsList = (
	variables: ApiModelesFichesOptionsListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedFicheModeleOptionsList,
		ApiModelesFichesOptionsListError,
		undefined,
		{},
		ApiModelesFichesOptionsListQueryParams,
		{}
	>({
		url: '/api/modeles/fiches/options',
		method: 'get',
		...variables,
		signal,
	})

/**
 * Permet de récupérer les titres des fiches modèle sous formes d'options pour un select
 */
export const useApiModelesFichesOptionsList = <
	TData = Schemas.PaginatedFicheModeleOptionsList
>(
	variables: ApiModelesFichesOptionsListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedFicheModeleOptionsList,
			ApiModelesFichesOptionsListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedFicheModeleOptionsList,
		ApiModelesFichesOptionsListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/modeles/fiches/options',
			operationId: 'apiModelesFichesOptionsList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiModelesFichesOptionsList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiNotesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiNotesCreateVariables = {
	body: Schemas.NoteCreateRequest
} & ApiContext['fetcherOptions']

/**
 * Permet de créer une nouvelle note
 */
export const fetchApiNotesCreate = (
	variables: ApiNotesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.NoteCreate,
		ApiNotesCreateError,
		Schemas.NoteCreateRequest,
		{},
		{},
		{}
	>({ url: '/api/notes/', method: 'post', ...variables, signal })

/**
 * Permet de créer une nouvelle note
 */
export const useApiNotesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.NoteCreate,
			ApiNotesCreateError,
			ApiNotesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.NoteCreate,
		ApiNotesCreateError,
		ApiNotesCreateVariables
	>({
		mutationFn: (variables: ApiNotesCreateVariables) =>
			fetchApiNotesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiNotesRetrievePathParams = {
	id: number
}

export type ApiNotesRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiNotesRetrieveVariables = {
	pathParams: ApiNotesRetrievePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const fetchApiNotesRetrieve = (
	variables: ApiNotesRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.NoteDetail,
		ApiNotesRetrieveError,
		undefined,
		{},
		{},
		ApiNotesRetrievePathParams
	>({ url: '/api/notes/{id}', method: 'get', ...variables, signal })

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const useApiNotesRetrieve = <TData = Schemas.NoteDetail>(
	variables: ApiNotesRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.NoteDetail,
			ApiNotesRetrieveError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.NoteDetail,
		ApiNotesRetrieveError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/notes/{id}',
			operationId: 'apiNotesRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiNotesRetrieve({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type ApiNotesUpdatePathParams = {
	id: number
}

export type ApiNotesUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiNotesUpdateVariables = {
	body: Schemas.NoteDetailRequest
	pathParams: ApiNotesUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const fetchApiNotesUpdate = (
	variables: ApiNotesUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.NoteDetail,
		ApiNotesUpdateError,
		Schemas.NoteDetailRequest,
		{},
		{},
		ApiNotesUpdatePathParams
	>({ url: '/api/notes/{id}', method: 'put', ...variables, signal })

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const useApiNotesUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.NoteDetail,
			ApiNotesUpdateError,
			ApiNotesUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.NoteDetail,
		ApiNotesUpdateError,
		ApiNotesUpdateVariables
	>({
		mutationFn: (variables: ApiNotesUpdateVariables) =>
			fetchApiNotesUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiNotesPartialUpdatePathParams = {
	id: number
}

export type ApiNotesPartialUpdateError = Fetcher.ErrorWrapper<undefined>

export type ApiNotesPartialUpdateVariables = {
	body?: Schemas.PatchedNoteDetailRequest
	pathParams: ApiNotesPartialUpdatePathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const fetchApiNotesPartialUpdate = (
	variables: ApiNotesPartialUpdateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.NoteDetail,
		ApiNotesPartialUpdateError,
		Schemas.PatchedNoteDetailRequest,
		{},
		{},
		ApiNotesPartialUpdatePathParams
	>({ url: '/api/notes/{id}', method: 'patch', ...variables, signal })

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const useApiNotesPartialUpdate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.NoteDetail,
			ApiNotesPartialUpdateError,
			ApiNotesPartialUpdateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.NoteDetail,
		ApiNotesPartialUpdateError,
		ApiNotesPartialUpdateVariables
	>({
		mutationFn: (variables: ApiNotesPartialUpdateVariables) =>
			fetchApiNotesPartialUpdate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiNotesDestroyPathParams = {
	id: number
}

export type ApiNotesDestroyError = Fetcher.ErrorWrapper<undefined>

export type ApiNotesDestroyVariables = {
	pathParams: ApiNotesDestroyPathParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const fetchApiNotesDestroy = (
	variables: ApiNotesDestroyVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiNotesDestroyError,
		undefined,
		{},
		{},
		ApiNotesDestroyPathParams
	>({ url: '/api/notes/{id}', method: 'delete', ...variables, signal })

/**
 * Permet de récupérer, modifier ou supprimer une note existante
 */
export const useApiNotesDestroy = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiNotesDestroyError,
			ApiNotesDestroyVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiNotesDestroyError,
		ApiNotesDestroyVariables
	>({
		mutationFn: (variables: ApiNotesDestroyVariables) =>
			fetchApiNotesDestroy({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiPlanningMachineListQueryParams = {
	/**
	 * annee
	 */
	annee: number
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
	/**
	 * numero semaine
	 */
	semaine: number
}

export type ApiPlanningMachineListError = Fetcher.ErrorWrapper<undefined>

export type ApiPlanningMachineListVariables = {
	queryParams: ApiPlanningMachineListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer pour une semaine donnée, chaque affaires et leurs fiches à traiter pour chaque machine
 */
export const fetchApiPlanningMachineList = (
	variables: ApiPlanningMachineListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedPlanningMachineList,
		ApiPlanningMachineListError,
		undefined,
		{},
		ApiPlanningMachineListQueryParams,
		{}
	>({ url: '/api/planning/machine', method: 'get', ...variables, signal })

/**
 * Permet de récupérer pour une semaine donnée, chaque affaires et leurs fiches à traiter pour chaque machine
 */
export const useApiPlanningMachineList = <
	TData = Schemas.PaginatedPlanningMachineList
>(
	variables: ApiPlanningMachineListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedPlanningMachineList,
			ApiPlanningMachineListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedPlanningMachineList,
		ApiPlanningMachineListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/planning/machine',
			operationId: 'apiPlanningMachineList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiPlanningMachineList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiPlanningZoneListQueryParams = {
	/**
	 * annee
	 */
	annee: number
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
	/**
	 * numero semaine
	 */
	semaine: number
}

export type ApiPlanningZoneListError = Fetcher.ErrorWrapper<undefined>

export type ApiPlanningZoneListVariables = {
	queryParams: ApiPlanningZoneListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer pour une année et semaine donnée, chaque affaires et leurs fiches à traiter dans chaque zone
 */
export const fetchApiPlanningZoneList = (
	variables: ApiPlanningZoneListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedPlanningZoneList,
		ApiPlanningZoneListError,
		undefined,
		{},
		ApiPlanningZoneListQueryParams,
		{}
	>({ url: '/api/planning/zone', method: 'get', ...variables, signal })

/**
 * Permet de récupérer pour une année et semaine donnée, chaque affaires et leurs fiches à traiter dans chaque zone
 */
export const useApiPlanningZoneList = <
	TData = Schemas.PaginatedPlanningZoneList
>(
	variables: ApiPlanningZoneListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedPlanningZoneList,
			ApiPlanningZoneListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedPlanningZoneList,
		ApiPlanningZoneListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/planning/zone',
			operationId: 'apiPlanningZoneList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiPlanningZoneList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiPointagesCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiPointagesCreateVariables = {
	body: Schemas.PointageRequest
} & ApiContext['fetcherOptions']

/**
 * Si aucun pointage n'est en cours, crée un nouveau pointage
 *
 * Si un pointage est en cours et que l'étape est différente que celle du pointage en cours,
 * stoppe le pointage en cour et en crée un nouveau
 *
 * Si un pointage est en cours et que l'étape est la même que celle du pointage en cours,
 * stoppe le pointage en cours
 */
export const fetchApiPointagesCreate = (
	variables: ApiPointagesCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.Pointage,
		ApiPointagesCreateError,
		Schemas.PointageRequest,
		{},
		{},
		{}
	>({ url: '/api/pointages/', method: 'post', ...variables, signal })

/**
 * Si aucun pointage n'est en cours, crée un nouveau pointage
 *
 * Si un pointage est en cours et que l'étape est différente que celle du pointage en cours,
 * stoppe le pointage en cour et en crée un nouveau
 *
 * Si un pointage est en cours et que l'étape est la même que celle du pointage en cours,
 * stoppe le pointage en cours
 */
export const useApiPointagesCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.Pointage,
			ApiPointagesCreateError,
			ApiPointagesCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.Pointage,
		ApiPointagesCreateError,
		ApiPointagesCreateVariables
	>({
		mutationFn: (variables: ApiPointagesCreateVariables) =>
			fetchApiPointagesCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type ApiPointagesListListQueryParams = {
	/**
	 * Filtre les pointages selon qu'ils soient en cours ou non
	 */
	en_cours?: 'false' | 'true'
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiPointagesListListError = Fetcher.ErrorWrapper<undefined>

export type ApiPointagesListListVariables = {
	queryParams?: ApiPointagesListListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Liste des pointages
 */
export const fetchApiPointagesListList = (
	variables: ApiPointagesListListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedReadPointageList,
		ApiPointagesListListError,
		undefined,
		{},
		ApiPointagesListListQueryParams,
		{}
	>({ url: '/api/pointages/list', method: 'get', ...variables, signal })

/**
 * Liste des pointages
 */
export const useApiPointagesListList = <
	TData = Schemas.PaginatedReadPointageList
>(
	variables: ApiPointagesListListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedReadPointageList,
			ApiPointagesListListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedReadPointageList,
		ApiPointagesListListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/pointages/list',
			operationId: 'apiPointagesListList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiPointagesListList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiSalariesFormOptionsListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiSalariesFormOptionsListError = Fetcher.ErrorWrapper<undefined>

export type ApiSalariesFormOptionsListVariables = {
	queryParams?: ApiSalariesFormOptionsListQueryParams
} & ApiContext['fetcherOptions']

/**
 * Permet de récupérer les options pour les formulaires
 */
export const fetchApiSalariesFormOptionsList = (
	variables: ApiSalariesFormOptionsListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedSalarieFormOptionsList,
		ApiSalariesFormOptionsListError,
		undefined,
		{},
		ApiSalariesFormOptionsListQueryParams,
		{}
	>({
		url: '/api/salaries/form-options',
		method: 'get',
		...variables,
		signal,
	})

/**
 * Permet de récupérer les options pour les formulaires
 */
export const useApiSalariesFormOptionsList = <
	TData = Schemas.PaginatedSalarieFormOptionsList
>(
	variables: ApiSalariesFormOptionsListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedSalarieFormOptionsList,
			ApiSalariesFormOptionsListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedSalarieFormOptionsList,
		ApiSalariesFormOptionsListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/salaries/form-options',
			operationId: 'apiSalariesFormOptionsList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiSalariesFormOptionsList(
				{ ...fetcherOptions, ...variables },
				signal
			),
		...options,
		...queryOptions,
	})
}

export type ApiTasksResyncDataSgmCreateError = Fetcher.ErrorWrapper<undefined>

export type ApiTasksResyncDataSgmCreateVariables = ApiContext['fetcherOptions']

/**
 * Sync les données SGM affaire avec la base de données django
 */
export const fetchApiTasksResyncDataSgmCreate = (
	variables: ApiTasksResyncDataSgmCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		undefined,
		ApiTasksResyncDataSgmCreateError,
		undefined,
		{},
		{},
		{}
	>({
		url: '/api/tasks/resync_data_sgm',
		method: 'post',
		...variables,
		signal,
	})

/**
 * Sync les données SGM affaire avec la base de données django
 */
export const useApiTasksResyncDataSgmCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			undefined,
			ApiTasksResyncDataSgmCreateError,
			ApiTasksResyncDataSgmCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		undefined,
		ApiTasksResyncDataSgmCreateError,
		ApiTasksResyncDataSgmCreateVariables
	>({
		mutationFn: (variables: ApiTasksResyncDataSgmCreateVariables) =>
			fetchApiTasksResyncDataSgmCreate({
				...fetcherOptions,
				...variables,
			}),
		...options,
	})
}

export type ApiUserRetrieveError = Fetcher.ErrorWrapper<undefined>

export type ApiUserRetrieveVariables = ApiContext['fetcherOptions']

export const fetchApiUserRetrieve = (
	variables: ApiUserRetrieveVariables,
	signal?: AbortSignal
) =>
	apiFetch<Schemas.User, ApiUserRetrieveError, undefined, {}, {}, {}>({
		url: '/api/user',
		method: 'get',
		...variables,
		signal,
	})

export const useApiUserRetrieve = <TData = Schemas.User>(
	variables: ApiUserRetrieveVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<Schemas.User, ApiUserRetrieveError, TData>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<Schemas.User, ApiUserRetrieveError, TData>({
		queryKey: queryKeyFn({
			path: '/api/user',
			operationId: 'apiUserRetrieve',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiUserRetrieve({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type ApiZonesListQueryParams = {
	/**
	 * A page number within the paginated result set.
	 */
	page?: number
}

export type ApiZonesListError = Fetcher.ErrorWrapper<undefined>

export type ApiZonesListVariables = {
	queryParams?: ApiZonesListQueryParams
} & ApiContext['fetcherOptions']

export const fetchApiZonesList = (
	variables: ApiZonesListVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.PaginatedListZoneList,
		ApiZonesListError,
		undefined,
		{},
		ApiZonesListQueryParams,
		{}
	>({ url: '/api/zones/', method: 'get', ...variables, signal })

export const useApiZonesList = <TData = Schemas.PaginatedListZoneList>(
	variables: ApiZonesListVariables,
	options?: Omit<
		reactQuery.UseQueryOptions<
			Schemas.PaginatedListZoneList,
			ApiZonesListError,
			TData
		>,
		'queryKey' | 'queryFn'
	>
) => {
	const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options)
	return reactQuery.useQuery<
		Schemas.PaginatedListZoneList,
		ApiZonesListError,
		TData
	>({
		queryKey: queryKeyFn({
			path: '/api/zones/',
			operationId: 'apiZonesList',
			variables,
		}),
		queryFn: ({ signal }) =>
			fetchApiZonesList({ ...fetcherOptions, ...variables }, signal),
		...options,
		...queryOptions,
	})
}

export type AuthTokenCreateError = Fetcher.ErrorWrapper<undefined>

export type AuthTokenCreateVariables = {
	body: Schemas.TokenObtainPairRequest
} & ApiContext['fetcherOptions']

/**
 * Takes a set of user credentials and returns an access and refresh JSON web
 * token pair to prove the authentication of those credentials.
 */
export const fetchAuthTokenCreate = (
	variables: AuthTokenCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.TokenObtainPair,
		AuthTokenCreateError,
		Schemas.TokenObtainPairRequest,
		{},
		{},
		{}
	>({ url: '/auth/token', method: 'post', ...variables, signal })

/**
 * Takes a set of user credentials and returns an access and refresh JSON web
 * token pair to prove the authentication of those credentials.
 */
export const useAuthTokenCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.TokenObtainPair,
			AuthTokenCreateError,
			AuthTokenCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.TokenObtainPair,
		AuthTokenCreateError,
		AuthTokenCreateVariables
	>({
		mutationFn: (variables: AuthTokenCreateVariables) =>
			fetchAuthTokenCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type AuthTokenRefreshCreateError = Fetcher.ErrorWrapper<undefined>

export type AuthTokenRefreshCreateVariables = {
	body: Schemas.TokenRefreshRequest
} & ApiContext['fetcherOptions']

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const fetchAuthTokenRefreshCreate = (
	variables: AuthTokenRefreshCreateVariables,
	signal?: AbortSignal
) =>
	apiFetch<
		Schemas.TokenRefresh,
		AuthTokenRefreshCreateError,
		Schemas.TokenRefreshRequest,
		{},
		{},
		{}
	>({ url: '/auth/token/refresh', method: 'post', ...variables, signal })

/**
 * Takes a refresh type JSON web token and returns an access type JSON web
 * token if the refresh token is valid.
 */
export const useAuthTokenRefreshCreate = (
	options?: Omit<
		reactQuery.UseMutationOptions<
			Schemas.TokenRefresh,
			AuthTokenRefreshCreateError,
			AuthTokenRefreshCreateVariables
		>,
		'mutationFn'
	>
) => {
	const { fetcherOptions } = useApiContext()
	return reactQuery.useMutation<
		Schemas.TokenRefresh,
		AuthTokenRefreshCreateError,
		AuthTokenRefreshCreateVariables
	>({
		mutationFn: (variables: AuthTokenRefreshCreateVariables) =>
			fetchAuthTokenRefreshCreate({ ...fetcherOptions, ...variables }),
		...options,
	})
}

export type QueryOperation =
	| {
			path: '/api/affaires/'
			operationId: 'apiAffairesList'
			variables: ApiAffairesListVariables
	  }
	| {
			path: '/api/affaires/{id}'
			operationId: 'apiAffairesRetrieve'
			variables: ApiAffairesRetrieveVariables
	  }
	| {
			path: '/api/affaires/{id}/fiches'
			operationId: 'apiAffairesFichesRetrieve'
			variables: ApiAffairesFichesRetrieveVariables
	  }
	| {
			path: '/api/affaires/nums'
			operationId: 'apiAffairesNumsList'
			variables: ApiAffairesNumsListVariables
	  }
	| {
			path: '/api/affaires/stat/{id}'
			operationId: 'apiAffairesStatRetrieve'
			variables: ApiAffairesStatRetrieveVariables
	  }
	| {
			path: '/api/affaires/stats/'
			operationId: 'apiAffairesStatsRetrieve'
			variables: ApiAffairesStatsRetrieveVariables
	  }
	| {
			path: '/api/affectations/ajustages/'
			operationId: 'apiAffectationsAjustagesList'
			variables: ApiAffectationsAjustagesListVariables
	  }
	| {
			path: '/api/affectations/ajustages/{id}'
			operationId: 'apiAffectationsAjustagesRetrieve'
			variables: ApiAffectationsAjustagesRetrieveVariables
	  }
	| {
			path: '/api/affectations/machines/'
			operationId: 'apiAffectationsMachinesList'
			variables: ApiAffectationsMachinesListVariables
	  }
	| {
			path: '/api/affectations/machines/{id}'
			operationId: 'apiAffectationsMachinesRetrieve'
			variables: ApiAffectationsMachinesRetrieveVariables
	  }
	| {
			path: '/api/etapes/{id}'
			operationId: 'apiEtapesRetrieve'
			variables: ApiEtapesRetrieveVariables
	  }
	| {
			path: '/api/fiches/{id}'
			operationId: 'apiFichesRetrieve'
			variables: ApiFichesRetrieveVariables
	  }
	| {
			path: '/api/fiches/ajustage/a_planifier'
			operationId: 'apiFichesAjustageAPlanifierList'
			variables: ApiFichesAjustageAPlanifierListVariables
	  }
	| {
			path: '/api/fiches/etapes/{id}'
			operationId: 'apiFichesEtapesRetrieve'
			variables: ApiFichesEtapesRetrieveVariables
	  }
	| {
			path: '/api/fiches/machine/a_planifier'
			operationId: 'apiFichesMachineAPlanifierList'
			variables: ApiFichesMachineAPlanifierListVariables
	  }
	| {
			path: '/api/groupe_machine/'
			operationId: 'apiGroupeMachineList'
			variables: ApiGroupeMachineListVariables
	  }
	| {
			path: '/api/groupe_machine/{id}/'
			operationId: 'apiGroupeMachineRetrieve'
			variables: ApiGroupeMachineRetrieveVariables
	  }
	| {
			path: '/api/machines/'
			operationId: 'apiMachinesList'
			variables: ApiMachinesListVariables
	  }
	| {
			path: '/api/machines/{id}'
			operationId: 'apiMachinesRetrieve'
			variables: ApiMachinesRetrieveVariables
	  }
	| {
			path: '/api/modeles/etapes/'
			operationId: 'apiModelesEtapesList'
			variables: ApiModelesEtapesListVariables
	  }
	| {
			path: '/api/modeles/etapes/{id}'
			operationId: 'apiModelesEtapesRetrieve'
			variables: ApiModelesEtapesRetrieveVariables
	  }
	| {
			path: '/api/modeles/fiches/'
			operationId: 'apiModelesFichesList'
			variables: ApiModelesFichesListVariables
	  }
	| {
			path: '/api/modeles/fiches/{id}'
			operationId: 'apiModelesFichesRetrieve'
			variables: ApiModelesFichesRetrieveVariables
	  }
	| {
			path: '/api/modeles/fiches/options'
			operationId: 'apiModelesFichesOptionsList'
			variables: ApiModelesFichesOptionsListVariables
	  }
	| {
			path: '/api/notes/{id}'
			operationId: 'apiNotesRetrieve'
			variables: ApiNotesRetrieveVariables
	  }
	| {
			path: '/api/planning/machine'
			operationId: 'apiPlanningMachineList'
			variables: ApiPlanningMachineListVariables
	  }
	| {
			path: '/api/planning/zone'
			operationId: 'apiPlanningZoneList'
			variables: ApiPlanningZoneListVariables
	  }
	| {
			path: '/api/pointages/list'
			operationId: 'apiPointagesListList'
			variables: ApiPointagesListListVariables
	  }
	| {
			path: '/api/salaries/form-options'
			operationId: 'apiSalariesFormOptionsList'
			variables: ApiSalariesFormOptionsListVariables
	  }
	| {
			path: '/api/user'
			operationId: 'apiUserRetrieve'
			variables: ApiUserRetrieveVariables
	  }
	| {
			path: '/api/zones/'
			operationId: 'apiZonesList'
			variables: ApiZonesListVariables
	  }
